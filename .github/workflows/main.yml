name: Java CI with Maven

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to trigger the build'
        required: false
        default: 'main'
        type: string
      docker_image_name:
        description: 'Docker image name'
        required: true
        type: string
      mvn_file:
        description: 'Maven file'
        required: false
        default: 'pom.xml'
        type: string
      mvn_options:
        description: 'Additional Maven options'
        required: false
        default: '-B'
        type: string
      mvn_actions:
        description: 'Additional Maven actions'
        required: false
        default: 'package'
        type: string
      jdk_version:
        description: 'JDK version to use'
        required: false
        default: '17'
        type: string
      jdk_distribution:
        description: 'JDK distribution to use'
        required: false
        default: 'temurin'
        type: string
    secrets:
      HCP_CLIENT_ID:
        required: true
      HCP_CLIENT_SECRET:
        required: true
      # HCP_ORGANIZATION_ID:
      #   required: true
      # HCP_PROJECT_ID:
      #   required: true
      # DOCKER_USERNAME:
      #   required: true
      # DOCKER_PASSWORD:
      #   required: true
      # SNYK_TOKEN:
      #   required: true
      # JFROG_TOKEN:
      #   required: true
      # JFROG_URL: 
      #   required: true
      # JFROG_USERNAME:
      #   required: true
      # JFROG_DOMAIN:
      #   required: true
      # JFROG_DOCKER_TOKEN:
      #   required: true
      # SLACK_WEBHOOK_URL:
      #   required: true
      # TEST_SECRET:
      #   required: true

permissions:
  security-events: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      slack_webhook: ${{ steps.retrieve_secret.outputs.slack_webhook }}
    steps:
      - name: Install HashiCorp CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt update && sudo apt install -y hcp 

      - name: Authenticate with HCP Vault Secrets
        env:
          HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
        run: |
          hcp auth login --client-id $HCP_CLIENT_ID --client-secret $HCP_CLIENT_SECRET
     
      - name: Retrieve Secret
        id: retrieve_secret
        run: |
          hcp vault-secrets run env --app github-ci-secrets >> $GITHUB_ENV
          hcp vault-secrets run env --app github-ci-secrets SLACK_WEBHOOK_URL >> $GITHUB_ENV
          while IFS='=' read -r key value; do
            echo "::add-mask::$key"
            echo "::add-mask::$value"
          done < <(hcp vault-secrets run env --app github-ci-secrets)
          echo $GITHUB_OUTPUT
          
      # echo "slack_webhook=$slack_webhook" >> $GITHUB_OUTPUT
      #  slack_webhook=$(grep SLACK_WEBHOOK_URL $GITHUB_ENV)

  #     - name: Post a message in a channel
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           blocks:
  #           - type: "section"
  #             text:
  #               type: "mrkdwn"
  #               text: "üöÄGitHub Action pipeline started: ${{ inputs.branch }}"

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: ${{ github.repository }}
  #         ref: ${{ inputs.branch }}
        
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: ${{ inputs.jdk_version }}
  #         distribution: ${{ inputs.jdk_distribution }}
  #         cache: maven
        
  #     - name: Build with Maven
  #       run: mvn ${{ inputs.mvn_options }} ${{inputs.mvn_actions}} --file ${{ inputs.mvn_file }}
      
  #     - name: Post a message in a channel
  #       if: always()
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Maven Build: *SUCCESS*' || '‚ùå Maven Build: *FAILED*' }}"

        
  #     - name: Set up Docker BuildX
  #       uses: docker/setup-buildx-action@v3
      
  #     - name: Log in to Docker hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.DOCKER_USERNAME }}
  #         password: ${{ env.DOCKER_PASSWORD }}

  #     - name: Build Docker image
  #       run: |
  #          docker build -t ${{ env.DOCKER_USERNAME }}/${{ inputs.docker_image_name }}:latest .
           
  #     - name: Post a message in Slack
  #       if: always()  # This ensures the message is sent whether the job passes or fails
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Docker image build: *SUCCESS*' || '‚ùå Docker image build : *FAILED*' }}"

  #     - name: Scan Docker image 
  #       uses: snyk/actions/docker@master
  #       continue-on-error: true
  #       with:
  #         image: ${{ env.DOCKER_USERNAME }}/${{ inputs.docker_image_name }}:latest
  #         args: --severity-threshold=high 
  #       env: 
  #         SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        
  #     - name: Post a message in a channel
  #       if: always()
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Snyk image scan: *SUCCESS*' || '‚ùå Snyk image scan: *FAILED*' }}"
        
  #     - name: JFrog CLI Setup
  #       uses: jfrog/setup-jfrog-cli@v4
  #       env:
  #         JF_URL: ${{ env.JFROG_URL }}
  #         JF_USER: ${{ env.JFROG_USERNAME }}
  #         JF_PASSWORD: ${{ env.JFROG_TOKEN }}
        
  #     - name: Upload JAR to JFrog Artifactory
  #       run: |
  #          jf rt u "target/*.jar" "github-ci-maven/"
         
  #     - name: Post a message in a channel
  #       if: always()
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Uploading Maven Jars to JFrog: *SUCCESS*' || '‚ùå Uploading Maven Jars to JFrog: *FAILED*' }}"
        
  #     - name: Push Docker Image to docker Hub
  #       run: |
  #          docker push ${{ env.DOCKER_USERNAME }}/${{ inputs.docker_image_name }}:latest 
  
  #     - name: Post a message in a channel
  #       if: always()
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Uploading image to Dockerhub: *SUCCESS*' || '‚ùå Uploading image to Dockerhub: *FAILED*' }}"
        
  #     - name: Tag Image for JFrog
  #       run: |
  #          docker tag ${{ env.DOCKER_USERNAME }}/${{ inputs.docker_image_name }}:latest ${{ env.JFROG_DOMAIN }}/github-ci-docker/${{ inputs.docker_image_name }}:latest
         
  #     - name: Log in to JFrog Docker Registry
  #       run: |
  #          echo ${{ env.JFROG_DOCKER_TOKEN }} | docker login ${{ env.JFROG_DOMAIN }} -u ${{ env.JFROG_USERNAME }} --password-stdin
         
  #     - name: Push Docker Image to JFrog
  #       run: |
  #          docker push ${{ secrets.JFROG_DOMAIN }}/github-ci-docker/${{ inputs.docker_image_name }}:latest  
           
  #     - name: Post a message in a channel
  #       if: always()
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ env.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ job.status == 'success' && '‚úÖ Uploading image to JFrog: *SUCCESS*' || '‚ùå Uploading image to JFrog: *FAILED*' }}"
  # notify:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: always()
  #   steps:
  #     - name: Post a message in a channel
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ needs.build.outputs.slack_webhook }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "${{ needs.build.result == 'success' && '‚úÖ Pipeline build: *SUCCESS*' || '‚ùå Pipeline build: *FAILED*' }}"
